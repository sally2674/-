e = int(input("알고 싶은 원소가 몇 족인가요?")) # e 값 설정
es = int(input("알고 싶은 원소의 전자껍질수가 어떻게 되나요?? ")) # es 값 설정
n2 = e - 10 # n2 정의
e1 = ["","H(수소)", "He(헬륨)"] # 1주기에서 3~12족을 제외한 원소들
e2 = ["","Li(리튬)", "Be(베릴륨)", "B(붕소)", "C(탄소)", "N(질소)", "O(산소)", "F(플루오린)", "Ne(네온)"] # 2주기에서 3~12족을 제외한 원소들
e3 = ["","Na(나트륨)", "Mg(마그네슘)", "Al(알류미늄)", "Si(규소)", "P(인)", "S(황)", "Cl(염소)", "Ar(아르곤)"] # 3주기에서 3~12족을 제외한 원소들
e4 = ["","K(칼륨)", "Ca(칼슘)", "Ga(갈륨)", "Ge(저마늄)", "As(비소)", "Se(셀레늄)", "Br(브로민)", "Kr(크립톤)"] # 4주기에서 3~12족을 제외한 원소들
e5 = ["","Rb(루비듐)", "Sr(스트론튬)", "In(인듐)", "Sn(주석)", "Sb(안티모니)", "Te(텔루륨)", "I(아이오딘)", "Xe(제논)"] # 5주기에서 3~12족을 제외한 원소들
e6 = ["","Cs(세슘)", "Ba(바륨)", "Tl(탈륨)", "Pb(납)", "Bi(비스무트)", "Po(폴로늄)", "At(아스탄틴)", "Rn(라돈)"] # 6주기에서 3~12족을 제외한 원소들
e7 = ["","Fr(프랑슘)", "Ra(라듐)"] # 7주기에서 3~18족을 제외한 원소들

nm ="그리고 이 원소는 비금속 원소로 전기음성도가 대체로 높은 편이다."
m = "그리고 이 원소는 금속 원소로 전기전도성이 높고 광택을 띈다."
hm = "그리고 이 원소는 준금속 원소로 금속원소와 비금속 원소의 중간 성질을 가진다."
k = e
f = n2
if n2 == 8:
    f = 0
f1 = nm
if es == 2 and e == 13:
    f1 == m
if es == 2:
    for e in range(14, 1, 17):
        f1 == nm
if es == 2 and n2 == 8:
    f1 == nm


f2 = m
if es == 3 and e == 13:
    f2 == m
elif es == 3 and e == 14:
    f2 == hm
elif e == 15:
    for e in range(15, 1, 17):
        f2 == nm



f3 = hm
if es == 4 and e == 4 and e == 5:
    f3 == hm
elif es == 4 and e == 3:
    f3 == m
elif es == 4:
    for e in range(16,1,17):
        f3 == nm
elif es == 4 and n2 == 8:
    f3 == nm

f4 = hm
if es == 5 and e == 3 and e == 4:
    f4 == m
elif es == 5 and e == 5 and e == 6:
    f4 == hm
elif es == 5 and e == 7:
    f4 == nm
elif es == 5 and n2 == 8:
    f4 == nm

f5 = hm 
if es == 6:
    for e in range(13,1,15):
        f5 == m
elif es ==  6 and e == 6:
    f5 == hm
elif es == 6 and e == 7:
    f5 == nm
elif es == 6 and n2 == 8:
    f5 == nm



an1 = e + es
an2 = es + n2

def one():
    if e == 1 and es == 1: # 1주기의 1족, 18족 원소 구하기
        수소 = e1[1]
        print("그 원소는" , e , "족의" , es , "주기의 원소이고" , 수소 , "이고 원자가전자수는" , k , "개이며 원자번호가 1인 전형원소 입니다." , nm )
    elif e == 18 and es == 1:
        헬륨 = e1[2]
        print("그 원소는" , e , "족의" , es , "주기의 원소인", 헬륨 , "이고 원자가전자수는" , f , "개이며 원자번호가 2인 전형원소 입니다." , nm)
        

def two(): # 조건문과 인덱싱을 이용해 임의의 미지수에 원소를 넣고, print 함수를 이용해서 출력하기.
    if e <= 2 and es == 2: # 2주기의 1~2족의 원소 구하기
        C = e2[e]
        print("그 원소는" , e , "족의" , es , "주기의 원소인", C , "이고 원자가전자수는" , k , "개이며 원자번호가" , an1 ,"인 전형원소 입니다" , m)
    elif 13 <= e <= 18 and es == 2: # 2주기의 13~18족 원소 구하기
        E = e2[n2]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",E, "이고 원자가전자수는" , f , "개이며 원자번호가" , an2 , "인 전형원소 입니다", f1)

def three(): 
    if e <= 2 and es == 3: # 3주기의 1~2족의 원소 구하기
        D = e3[e]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",D,  "이고 원자가전자수는" , k , "개이며 원자번호가" , an1 - 1 + 8, "인 전형원소 입니다", m)
    elif 13 <= e <= 18 and es == 3: # 3주기의 13~18족의 원소 구하기
        F = e3[n2]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",F, "이고 원자가전자수는" , f , "개이며 원자번호가" , an2 - 1 + 8, "인 전형원소 입니다", f2)

def four():
    if e <= 2 and es == 4: # 4주기의 1~2족의 원소 구하기
        O = e4[e]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",O, "이고 원자가전자수는" , k , "개이며 원자번호가" , an1 - 2 + 8*2, "인 전형원소 입니다", m)
    elif 13 <= e <= 18 and es == 4: # 4주기의 13~18족의 원소 구하기
        M = e4[n2]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",M, "이고 원자가전자수는" , f , "개이며 원자번호가" , an2 - 2 + 8 + 18, "인 전형원소 입니다", f3)


def five():
    if e <= 2 and es == 5: # 5주기의 1~2족의 원소 구하기
        P = e5[e]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",P,  "이고 원자가전자수는" , k , "개이며 원자번호가" , an1 + 8*2 + 18-3, "인 전형원소 입니다", m)
    elif 13 <= e <= 18 and es == 5: # 5주기의 13~18족의 원소 구하기
        N = e5[n2]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",N, "이고 원자가전자수는" , f , "개이며 원자번호가" , an2 - 3  + 8 + 18*2, "인 전형원소 입니다", f4)
        

def six():
    if e <= 2 and es == 6: # 6주기의 1~2족의 원소 구하기
        R = e6[e]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",R, "이고 원자가전자수는" , k , "개이며 원자번호가" , an1 - 4 + 8*2 + 18*2, "인 전형원소 입니다", m)
    elif 13 <= e <= 18 and es == 6: # 6주기의 13~18족의 원소 구하기
        Q = e6[n2]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",Q, "이고 원자가전자수는" , f , "개이며 원자번호가" , an2 - 4 + 8 + 18*3 + 14, "인 전형원소 입니다", f5)

def seven():
    if e <= 2 and es == 7: # 7주기의 1~2족의 원소 구하기
        S = e7[e]
        print("그 원소는" , e , "족의" , es , "주기의 원소인",S,  "이고 원자가전자수는" , k , "개이며 원자번호가" , an1 + 8 + 18*3 -5 + 14 + 8, "인  전형원소 입니다", m)

        

one(),two(),three(),four(),five(),six(),seven()










